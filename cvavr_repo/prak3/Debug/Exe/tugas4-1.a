;/*******************************************************
;This program was created by the
;CodeWizardAVR V3.12 Advanced
;Automatic Program Generator
;© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 18/12/2019
;Author  :
;Company :
;Comments:
;
;
;Chip type               : ATmega8535L
;Program type            : Application
;AVR Core Clock frequency: 4,000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 128
;*******************************************************/
;
;#include <mega8535.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <stdio.h>
;#include <delay.h>
;
;// Alphanumeric LCD functions
;#include <alcd.h>
;
;// Declare your global variables here
;unsigned int data1,data2;
;float Voltase1,Voltase2;
;char kata1[12];
;char kata2[12];
;
;// Voltage Reference: AVCC pin
;#define ADC_VREF_TYPE ((0<<REFS1) | (1<<REFS0) | (1<<ADLAR))
;
;// Read the 8 most significant bits
;// of the AD conversion result
;unsigned char read_adc(unsigned char adc_input)
; 0000 002B {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 002C ADMUX=adc_input | ADC_VREF_TYPE;
;PCODE: $0000000F VOL: 0
;	adc_input -> Y+0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 002D // Delay needed for the stabilization of the ADC input voltage
; 0000 002E delay_us(10);
;PCODE: $00000013 VOL: 0
; 0000 002F // Start the AD conversion
; 0000 0030 ADCSRA|=(1<<ADSC);
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 0031 // Wait for the AD conversion to complete
; 0000 0032 while ((ADCSRA & (1<<ADIF))==0);
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 0033 ADCSRA|=(1<<ADIF);
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0000 0034 return ADCH;
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 0035 }
;PCODE: $00000021 VOL: 0
;
;void main(void)
; 0000 0038 {
;PCODE: $00000022 VOL: 0
; 0000 0039 // Declare your local variables here
; 0000 003A 
; 0000 003B // Input/Output Ports initialization
; 0000 003C // Port A initialization
; 0000 003D // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 003E DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0000 003F // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0040 PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 0041 
; 0000 0042 // Port B initialization
; 0000 0043 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0044 DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0000 0045 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0046 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0000 0047 
; 0000 0048 // Port C initialization
; 0000 0049 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 004A DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0000 004B // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 004C PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0000 004D 
; 0000 004E // Port D initialization
; 0000 004F // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0050 DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0000 0051 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0052 PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0000 0053 
; 0000 0054 // Timer/Counter 0 initialization
; 0000 0055 // Clock source: System Clock
; 0000 0056 // Clock value: Timer 0 Stopped
; 0000 0057 // Mode: Normal top=0xFF
; 0000 0058 // OC0 output: Disconnected
; 0000 0059 TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (0<<CS01) | (0<<CS00);
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0000 005A TCNT0=0x00;
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 005B OCR0=0x00;
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 005C 
; 0000 005D // Timer/Counter 1 initialization
; 0000 005E // Clock source: System Clock
; 0000 005F // Clock value: Timer1 Stopped
; 0000 0060 // Mode: Normal top=0xFFFF
; 0000 0061 // OC1A output: Disconnected
; 0000 0062 // OC1B output: Disconnected
; 0000 0063 // Noise Canceler: Off
; 0000 0064 // Input Capture on Falling Edge
; 0000 0065 // Timer1 Overflow Interrupt: Off
; 0000 0066 // Input Capture Interrupt: Off
; 0000 0067 // Compare A Match Interrupt: Off
; 0000 0068 // Compare B Match Interrupt: Off
; 0000 0069 TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0000 006A TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 006B TCNT1H=0x00;
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0000 006C TCNT1L=0x00;
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 006D ICR1H=0x00;
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0000 006E ICR1L=0x00;
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0000 006F OCR1AH=0x00;
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0000 0070 OCR1AL=0x00;
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0000 0071 OCR1BH=0x00;
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0000 0072 OCR1BL=0x00;
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 0073 
; 0000 0074 // Timer/Counter 2 initialization
; 0000 0075 // Clock source: System Clock
; 0000 0076 // Clock value: Timer2 Stopped
; 0000 0077 // Mode: Normal top=0xFF
; 0000 0078 // OC2 output: Disconnected
; 0000 0079 ASSR=0<<AS2;
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 007A TCCR2=(0<<WGM20) | (0<<COM21) | (0<<COM20) | (0<<WGM21) | (0<<CS22) | (0<<CS21) | (0<<CS20);
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0000 007B TCNT2=0x00;
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 007C OCR2=0x00;
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 007D 
; 0000 007E // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 007F TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0000 0080 
; 0000 0081 // External Interrupt(s) initialization
; 0000 0082 // INT0: Off
; 0000 0083 // INT1: Off
; 0000 0084 // INT2: Off
; 0000 0085 MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0000 0086 MCUCSR=(0<<ISC2);
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0000 0087 
; 0000 0088 // USART initialization
; 0000 0089 // USART disabled
; 0000 008A UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (0<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0000 008B 
; 0000 008C // Analog Comparator initialization
; 0000 008D // Analog Comparator: Off
; 0000 008E // The Analog Comparator's positive input is
; 0000 008F // connected to the AIN0 pin
; 0000 0090 // The Analog Comparator's negative input is
; 0000 0091 // connected to the AIN1 pin
; 0000 0092 ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0000 0093 
; 0000 0094 // ADC initialization
; 0000 0095 // ADC Clock frequency: 1000,000 kHz
; 0000 0096 // ADC Voltage Reference: AVCC pin
; 0000 0097 // ADC High Speed Mode: Off
; 0000 0098 // ADC Auto Trigger Source: ADC Stopped
; 0000 0099 // Only the 8 most significant bits of
; 0000 009A // the AD conversion result are used
; 0000 009B ADMUX=ADC_VREF_TYPE;
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 009C ADCSRA=(1<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (1<<ADPS1) | (0<<ADPS0);
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0000 009D SFIOR=(1<<ADHSM) | (0<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0000 009E 
; 0000 009F // SPI initialization
; 0000 00A0 // SPI disabled
; 0000 00A1 SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0000 00A2 
; 0000 00A3 // TWI initialization
; 0000 00A4 // TWI disabled
; 0000 00A5 TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0000 00A6 
; 0000 00A7 // Alphanumeric LCD initialization
; 0000 00A8 // Connections are specified in the
; 0000 00A9 // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
; 0000 00AA // RS - PORTB Bit 0
; 0000 00AB // RD - PORTB Bit 1
; 0000 00AC // EN - PORTB Bit 2
; 0000 00AD // D4 - PORTB Bit 4
; 0000 00AE // D5 - PORTB Bit 5
; 0000 00AF // D6 - PORTB Bit 6
; 0000 00B0 // D7 - PORTB Bit 7
; 0000 00B1 // Characters/line: 16
; 0000 00B2 lcd_init(16);
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0000 00B3 
; 0000 00B4 while (1)
;PCODE: $0000006B VOL: 0
; 0000 00B5       {
; 0000 00B6       // Place your code here
; 0000 00B7       data1 = read_adc(0);
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0000 00B8       data2 = read_adc(1);
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
; 0000 00B9       Voltase1 = ((float)data1) / 1024*5;
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
; 0000 00BA       Voltase2 = ((float)data2) / 1024*5;
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
; 0000 00BB       sprintf(kata1,"%3.3f volt", Voltase1);
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
; 0000 00BC       sprintf(kata2,"%3.3f volt", Voltase2);
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
; 0000 00BD       lcd_gotoxy(0,0);
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
; 0000 00BE       lcd_puts(kata1);
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
; 0000 00BF        lcd_gotoxy(0,1);
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
; 0000 00C0       lcd_puts(kata2);
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
; 0000 00C1       delay_ms(50);
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
; 0000 00C2       }
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
; 0000 00C3 }
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
